{"version":3,"sources":["../../../src/app/controllers/SessionController.js"],"names":["UserController","req","res","result","loginSchema","body","success","status","json","object","send","email","password","user","User","findOne","where","errors","checkPassword","id","name","token","jwt","sign","authConfig","secret","expiresIn"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEMA,c;;;;;;;gCACQC,G,EAAKC,G,EAAK;AACpB,UAAMC,SAAS,MAAM,wBAASC,eAAT,EAAsBH,IAAII,IAA1B,CAArB;;AAEA,UAAI,CAACF,OAAOG,OAAZ,EAAqB,OAAOJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,OAAOM,MAA5B,EAAoCC,IAApC,EAAP;;AAHD,sBAKQT,IAAII,IALZ;AAAA,UAKZM,KALY,aAKZA,KALY;AAAA,UAKLC,QALK,aAKLA,QALK;;AAMpB,UAAMC,OAAO,MAAMC,eAAKC,OAAL,CAAa,EAAEC,OAAO,EAAEL,YAAF,EAAT,EAAb,CAAnB;;AAEA,UAAI,CAACE,IAAL,EAAW;AACT,eAAOX,IACJK,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AACJS,kBAAQ,4BAAa,OAAb,EAAsB,QAAtB,EAAgC,wBAAhC;AADJ,SAFD,CAAP;AAKD;;AAED,UAAI,EAAE,MAAMJ,KAAKK,aAAL,CAAmBN,QAAnB,CAAR,CAAJ,EAA2C;AACzC,eAAOV,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BS,kBAAQ,4BAAa,UAAb,EAAyB,cAAzB,EAAyC,iBAAzC;AADkB,SAArB,CAAP;AAGD;AACD;AArBoB,UAsBZE,EAtBY,GAsBCN,IAtBD,CAsBZM,EAtBY;AAAA,UAsBRC,IAtBQ,GAsBCP,IAtBD,CAsBRO,IAtBQ;;;AAwBpB,aAAOlB,IAAIM,IAAJ,CAAS;AACda,eAAOC,uBAAIC,IAAJ,CAAS,EAAEV,MAAM,EAAEM,MAAF,EAAMC,UAAN,EAAYT,YAAZ,EAAR,EAAT,EAAwCa,eAAWC,MAAnD,EAA2D;AAChEC,qBAAWF,eAAWE;AAD0C,SAA3D;AADO,OAAT,CAAP;AAKD;;;;;;kBAGY,IAAI1B,cAAJ,E","file":"SessionController.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nimport User from '../models/User';\r\nimport validate from '../common/validate';\r\nimport errorMessage from '../common/errorMessage';\r\nimport loginSchema from '../schemasValidation/login';\r\nimport authConfig from '../../config/auth';\r\n\r\nclass UserController {\r\n  async login(req, res) {\r\n    const result = await validate(loginSchema, req.body);\r\n\r\n    if (!result.success) return res.status(400).json(result.object).send();\r\n\r\n    const { email, password } = req.body;\r\n    const user = await User.findOne({ where: { email } });\r\n\r\n    if (!user) {\r\n      return res\r\n        .status(400)\r\n        .json({\r\n          errors: errorMessage('email', 'unique', 'Usuário não encontrado'),\r\n        });\r\n    }\r\n\r\n    if (!(await user.checkPassword(password))) {\r\n      return res.status(400).json({\r\n        errors: errorMessage('password', 'verification', 'Senha incorreta'),\r\n      });\r\n    }\r\n    // aqui pego o id e nome do usuario, o email ja tenho anteriormente\r\n    const { id, name } = user;\r\n\r\n    return res.json({\r\n      token: jwt.sign({ user: { id, name, email } }, authConfig.secret, {\r\n        expiresIn: authConfig.expiresIn,\r\n      }),\r\n    });\r\n  }\r\n}\r\n\r\nexport default new UserController();\r\n"]}