{"version":3,"sources":["../../../src/app/controllers/UserController.js"],"names":["UserController","req","res","user","User","findAll","attributes","json","params","id","Number","isInteger","status","errors","findOne","where","result","schema","body","success","object","send","confirmPassword","create","name","surname","email"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,c;;;;;;;iCACSC,G,EAAKC,G,EAAK;AACrB,UAAMC,OAAO,MAAMC,eAAKC,OAAL,CAAa;AAC9BC,oBAAY,CAAC,IAAD,EAAO,MAAP,EAAe,SAAf,EAA0B,OAA1B;AADkB,OAAb,CAAnB;;AAIA,aAAOJ,IAAIK,IAAJ,CAASJ,IAAT,CAAP;AACD;;;kCAEaF,G,EAAKC,G,EAAK;AACtB,UAAI,CAACD,IAAIO,MAAJ,CAAWC,EAAZ,IAAkB,CAACC,OAAOC,SAAP,CAAiBV,IAAIO,MAAJ,CAAWC,EAA5B,CAAvB,EACE,OAAOP,IACJU,MADI,CACG,GADH,EAEJL,IAFI,CAEC,EAAEM,QAAQ,EAAEA,QAAQ,CAAC,8BAAD,CAAV,EAAV,EAFD,CAAP;;AAIF,UAAMV,OAAO,MAAMC,eAAKU,OAAL,CAAa;AAC9BC,eAAO;AACLN,cAAIR,IAAIO,MAAJ,CAAWC;AADV,SADuB;AAI9BH,oBAAY,CAAC,IAAD,EAAO,MAAP,EAAe,SAAf,EAA0B,OAA1B;AAJkB,OAAb,CAAnB;;AAOA,UAAI,CAACH,IAAL,EACE,OAAOD,IACJU,MADI,CACG,GADH,EAEJL,IAFI,CAEC,EAAEM,QAAQ,EAAEA,QAAQ,CAAC,4BAAD,CAAV,EAAV,EAFD,CAAP;;AAIF,aAAOX,IAAIK,IAAJ,CAASJ,IAAT,CAAP;AACD;;;iCAEYF,G,EAAKC,G,EAAK;AACrB,UAAMc,SAAS,MAAM,wBAASC,cAAT,EAAiBhB,IAAIiB,IAArB,CAArB;;AAEA,UAAI,CAACF,OAAOG,OAAZ,EAAqB,OAAOjB,IAAIU,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqBS,OAAOI,MAA5B,EAAoCC,IAApC,EAAP;;AAHA,UAKbD,MALa,GAKFJ,MALE,CAKbI,MALa;;AAMrB,UAAIA,OAAOE,eAAX,EAA4B,OAAOF,OAAOE,eAAd;;AANP,iBAQgB,MAAMlB,eAAKmB,MAAL,CAAYH,MAAZ,CARtB;AAAA,UAQbX,EARa,QAQbA,EARa;AAAA,UAQTe,IARS,QAQTA,IARS;AAAA,UAQHC,OARG,QAQHA,OARG;AAAA,UAQMC,KARN,QAQMA,KARN;;AAUrB,aAAOxB,IAAIK,IAAJ,CAAS;AACdE,cADc;AAEde,kBAFc;AAGdC,wBAHc;AAIdC;AAJc,OAAT,CAAP;AAMD;;;;;;kBAGY,IAAI1B,cAAJ,E","file":"UserController.js","sourcesContent":["import User from '../models/User';\r\nimport validate from '../common/validate';\r\nimport schema from '../schemasValidation/user';\r\n\r\nclass UserController {\r\n  async getAll(req, res) {\r\n    const user = await User.findAll({\r\n      attributes: ['id', 'name', 'surname', 'email'],\r\n    });\r\n\r\n    return res.json(user);\r\n  }\r\n\r\n  async getById(req, res) {\r\n    if (!req.params.id || !Number.isInteger(req.params.id))\r\n      return res\r\n        .status(400)\r\n        .json({ errors: { errors: ['Paramêtro informado inválido'] } });\r\n\r\n    const user = await User.findOne({\r\n      where: {\r\n        id: req.params.id,\r\n      },\r\n      attributes: ['id', 'name', 'surname', 'email'],\r\n    });\r\n\r\n    if (!user)\r\n      return res\r\n        .status(404)\r\n        .json({ errors: { errors: ['Nenhum registro encontrado'] } });\r\n\r\n    return res.json(user);\r\n  }\r\n\r\n  async create(req, res) {\r\n    const result = await validate(schema, req.body);\r\n\r\n    if (!result.success) return res.status(400).json(result.object).send();\r\n\r\n    const { object } = result;\r\n    if (object.confirmPassword) delete object.confirmPassword;\r\n\r\n    const { id, name, surname, email } = await User.create(object);\r\n\r\n    return res.json({\r\n      id,\r\n      name,\r\n      surname,\r\n      email,\r\n    });\r\n  }\r\n}\r\n\r\nexport default new UserController();\r\n"]}