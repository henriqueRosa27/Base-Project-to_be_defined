{"version":3,"sources":["../../src/database/index.js"],"names":["models","User","Class","StudentClass","Activity","ActivityDelivery","Database","init","connection","Sequelize","databaseConfig","map","model","associate"],"mappings":";;;;;;;AACA;;AAMA;;;AAPA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;AAEA;AACA,IAAMA,SAAS,CAACC,cAAD,EAAOC,eAAP,EAAcC,sBAAd,EAA4BC,kBAA5B,EAAsCC,0BAAtC,CAAf;;IAEMC,Q;AACJ,sBAAc;AAAA;;AACZ;AACA,SAAKC,IAAL;AACD;;;;2BAEM;AAAA;;AACL;AACA;AACA,WAAKC,UAAL,GAAkB,IAAIC,mBAAJ,CAAcC,kBAAd,CAAlB;AACA;AACA;AACA;AACAV,aACGW,GADH,CACO,UAACC,KAAD;AAAA,eAAWA,MAAML,IAAN,CAAW,MAAKC,UAAhB,CAAX;AAAA,OADP;AAEE;AACA;AACA;AACA;AACA;AANF,OAOGG,GAPH,CAQI,UAACC,KAAD;AAAA,eAAWA,MAAMC,SAAN,IAAmBD,MAAMC,SAAN,CAAgB,MAAKL,UAAL,CAAgBR,MAAhC,CAA9B;AAAA,OARJ;AAUD;;;;;;kBAGY,IAAIM,QAAJ,E","file":"index.js","sourcesContent":["import Sequelize from 'sequelize';\r\n// importo o model user da minha aplicacao\r\nimport User from '../app/models/User';\r\nimport Class from '../app/models/Class';\r\nimport StudentClass from '../app/models/StudentClass';\r\nimport Activity from '../app/models/Activity';\r\nimport ActivityDelivery from '../app/models/ActivityDelivery';\r\n// importo as configuracoes de conexao com o banco\r\nimport databaseConfig from '../config/database';\r\n\r\n// aqui vai ser um array contendo todos os models da minha aplicacao\r\nconst models = [User, Class, StudentClass, Activity, ActivityDelivery];\r\n\r\nclass Database {\r\n  constructor() {\r\n    // aqui no construtor, chamo o metodo init para ser executado quando rodar a aplicacao\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    // aqui estou pegando os dados de conexao do config/database e passando junto ao sequelize\r\n    // isto vai ficar armazenado na variavel connection\r\n    this.connection = new Sequelize(databaseConfig);\r\n    // agora aqui eu pego e percorro o array com todos os modelos da minha aplicacao\r\n    // e chamo o metodo contido em cada model (init)\r\n    // passo o parametro solicitado pelo init (sequelize) , que Ã© os dados de conexao\r\n    models\r\n      .map((model) => model.init(this.connection))\r\n      // aqui vou fazer um segundo map\r\n      // percorro os models e chamo para cada um o associate\r\n      // vou chamar o associate somente se ele existir no model\r\n      // a segunda parte vai executar somente se ele existir\r\n      // na segunda parte passo os models como parametro\r\n      .map(\r\n        (model) => model.associate && model.associate(this.connection.models)\r\n      );\r\n  }\r\n}\r\n\r\nexport default new Database();\r\n"]}